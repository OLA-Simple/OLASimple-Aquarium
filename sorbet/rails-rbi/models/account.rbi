# This is an autogenerated file for dynamic methods in Account
# Please rerun bundle exec rake rails_rbi:models[Account] to regenerate.

# typed: strong
module Account::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Account::GeneratedAttributeMethods
  sig { returns(T.nilable(Float)) }
  def amount; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def amount=(value); end

  sig { returns(T::Boolean) }
  def amount?; end

  sig { returns(T.nilable(Integer)) }
  def budget_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def budget_id=(value); end

  sig { returns(T::Boolean) }
  def budget_id?; end

  sig { returns(T.nilable(String)) }
  def category; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def category=(value); end

  sig { returns(T::Boolean) }
  def category?; end
end

module Account::GeneratedAssociationMethods
end

module Account::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Account]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Account]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Account]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Account)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Account) }
  def find_by_id!(id); end
end

class Account < ActiveRecord::Base
  include Account::GeneratedAttributeMethods
  include Account::GeneratedAssociationMethods
  extend Account::CustomFinderMethods
  extend Account::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Account::ActiveRecord_Relation, Account::ActiveRecord_Associations_CollectionProxy, Account::ActiveRecord_AssociationRelation) }
end

module Account::QueryMethodsReturningRelation
  sig { returns(Account::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Account::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Account::ActiveRecord_Relation) }
  def extending(*args, &block); end
end

module Account::QueryMethodsReturningAssociationRelation
  sig { returns(Account::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Account::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Account::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Account::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end
end

class Account::ActiveRecord_Relation < ActiveRecord::Relation
  include Account::ActiveRelation_WhereNot
  include Account::CustomFinderMethods
  include Account::QueryMethodsReturningRelation
  Elem = type_member(fixed: Account)
end

class Account::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Account::ActiveRelation_WhereNot
  include Account::CustomFinderMethods
  include Account::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Account)
end

class Account::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Account::CustomFinderMethods
  include Account::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Account)

  sig { params(records: T.any(Account, T::Array[Account])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Account, T::Array[Account])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Account, T::Array[Account])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Account, T::Array[Account])).returns(T.self_type) }
  def concat(*records); end
end
